name: cmake-ninja

on:
  push:
    #pull_request:

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    # Use centos7
    container:
      image: centos:7

    steps:
    - uses: actions/checkout@v3

    - name: Dependencies
      run: |
        pwd
        ls -la
        curl -L -O https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-Linux-x86_64.sh
        chmod +x cmake-3.16.4-Linux-x86_64.sh
        ./cmake-3.16.4-Linux-x86_64.sh --skip-license --prefix=/usr/local
        curl -L -O https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/7/x86_64/Packages/p/p7zip-16.02-20.el7.x86_64.rpm
        curl -L -O https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/7/x86_64/Packages/p/p7zip-plugins-16.02-20.el7.x86_64.rpm
        rpm -U --quiet p7zip-16.02-20.el7.x86_64.rpm
        rpm -U --quiet p7zip-plugins-16.02-20.el7.x86_64.rpm
        yum install -y epel-release
        yum install -y make libasan gcc-gfortran gcc-c++ unzip git openblas-devel lapack-devel zlib-devel tree fuse-sshfs
        user="$(whoami)"
        usermod -a -G fuse "$user"
        curl -L -O https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-linux.zip
        unzip ninja-linux.zip
        mv ./ninja /usr/bin
        pwd
        ls -la

    - name: Configure CMake
      shell: bash
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      # hdf5-openmpi-devel on centos7 probably broken
      #run: cmake -G Ninja -B ${{github.workspace}}/build -DLIBS_BUILD_HDF5=OFF -DCMAKE_BUILD_TYPE=Release -DLIBS_USE_MPI=OFF
      #run: cmake -G Ninja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DLIBS_USE_MPI=OFF  -DCMAKE_INSTALL_PREFIX=/usr
      run: cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=Release -DLIBS_USE_MPI=OFF  -DCMAKE_INSTALL_PREFIX=/usr

    - name: Build
      shell: bash
      # Build your program with the given configuration
      #run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: cmake --build build

    - name: Create AppImage
      shell: bash
      run: |
        pwd
        ls -la
        cd build
        pwd
        ls -la
        DESTDIR=AppDir ninja install
        tree AppDir
        pwd
        ls -la
        pwd
        ls -la ../
        pwd
        tree ../docs
        echo docs/Meshformat/pics/HOPR_logo.png
        mkdir -p AppDir/usr/share/icons
        cp ../docs/Meshformat/pics/HOPR_logo.png AppDir/usr/share/icons/hopr.png
        curl -L -O https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20220822-1/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage --desktop-file=../hopr.desktop
        pwd
        ls -la

    - name: Create archive
      run: |
        pwd
        ls -la
        mkdir artifact
        pwd
        ls -la
        7z a artifact/hopr.zip build/hopr-*-x86_64.AppImage
        pwd
        ls -la

    # Upload hopr binary archive as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: hopr-binary-archives
        path: artifact
